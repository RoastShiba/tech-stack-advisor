'use client';

import { useState } from 'react';
import { UserRequirements, RecommendationResult } from '@/types';
import { Card } from '@/components/ui/Card';
import { 
  Download, 
  FileText, 
  Code, 
  Mail, 
  Share2,
  Copy,
  CheckCircle
} from 'lucide-react';

interface ExportOptionsProps {
  recommendations: RecommendationResult;
  requirements: UserRequirements;
}

export default function ExportOptions({ recommendations, requirements }: ExportOptionsProps) {
  const [copied, setCopied] = useState(false);
  const [exportFormat, setExportFormat] = useState<'markdown' | 'json' | 'text'>('markdown');

  const generateMarkdownReport = () => {
    const { primaryStack, alternatives, liveInsights, confidence, reasoning } = recommendations;
    
    return `# Tech Stack Recommendation Report

## Project Overview
**Description:** ${requirements.projectDescription}
**Timeline:** ${requirements.timeline}
**Team Size:** ${requirements.teamSize}
**Experience Level:** ${requirements.experienceLevel}
**Budget:** ${requirements.budget}

## Recommended Stack: ${primaryStack.name}
**Confidence:** ${confidence}%
**Complexity:** ${primaryStack.complexity}
**Cost:** ${primaryStack.cost}
**Timeline:** ${primaryStack.timeline}

### Technology Components
- **Frontend:** ${primaryStack.frontend.name} - ${primaryStack.frontend.description}
${primaryStack.backend ? `- **Backend:** ${primaryStack.backend.name} - ${primaryStack.backend.description}` : ''}
${primaryStack.database ? `- **Database:** ${primaryStack.database.name} - ${primaryStack.database.description}` : ''}
- **Deployment:** ${primaryStack.deployment.name} - ${primaryStack.deployment.description}

### Additional Tools
${primaryStack.additionalTools.map(tool => `- ${tool.name}: ${tool.description}`).join('\n')}

### Key Project Files
\`\`\`
${primaryStack.keyFiles.join('\n')}
\`\`\`

### Use Cases
${primaryStack.useCases.map(useCase => `- ${useCase}`).join('\n')}

### Why This Stack?
${reasoning}

## Live Insights

### Current Trends
${liveInsights.trends.map(trend => `- ${trend}`).join('\n')}

### Security Considerations
${liveInsights.securityAlerts.length > 0 ? liveInsights.securityAlerts.map(alert => `- ⚠️ ${alert}`).join('\n') : '- No current security alerts found'}

### Popularity Metrics
${Object.entries(liveInsights.popularityData).map(([key, value]) => `- ${key}: ${value.toLocaleString()}`).join('\n')}

### Recent Updates
${liveInsights.recentUpdates.map(update => `- ${update}`).join('\n')}

## Alternative Options
${alternatives.map(stack => `
### ${stack.name}
- **Complexity:** ${stack.complexity}
- **Cost:** ${stack.cost}
- **Timeline:** ${stack.timeline}
- **Best for:** ${stack.useCases.slice(0, 3).join(', ')}
`).join('')}

## Documentation Links
- [${primaryStack.frontend.name}](${primaryStack.frontend.documentation})
${primaryStack.backend ? `- [${primaryStack.backend.name}](${primaryStack.backend.documentation})` : ''}
${primaryStack.database ? `- [${primaryStack.database.name}](${primaryStack.database.documentation})` : ''}
- [${primaryStack.deployment.name}](${primaryStack.deployment.documentation})

---
*Generated by Tech Stack Advisor - ${new Date().toLocaleDateString()}*`;
  };

  const generateJSONReport = () => {
    return JSON.stringify({
      timestamp: new Date().toISOString(),
      requirements,
      recommendations,
      metadata: {
        generatedBy: 'Tech Stack Advisor',
        version: '1.0.0'
      }
    }, null, 2);
  };

  const generateTextReport = () => {
    const { primaryStack, confidence, reasoning } = recommendations;
    
    return `TECH STACK RECOMMENDATION REPORT
${'='.repeat(40)}

Project: ${requirements.projectDescription}
Timeline: ${requirements.timeline}
Team: ${requirements.teamSize}
Experience: ${requirements.experienceLevel}
Budget: ${requirements.budget}

RECOMMENDED STACK: ${primaryStack.name.toUpperCase()}
Confidence: ${confidence}%

Technology Stack:
- Frontend: ${primaryStack.frontend.name}
${primaryStack.backend ? `- Backend: ${primaryStack.backend.name}` : ''}
${primaryStack.database ? `- Database: ${primaryStack.database.name}` : ''}
- Deployment: ${primaryStack.deployment.name}

Why this stack?
${reasoning}

Key Files:
${primaryStack.keyFiles.map(file => `- ${file}`).join('\n')}

Perfect for:
${primaryStack.useCases.map(useCase => `- ${useCase}`).join('\n')}

Generated: ${new Date().toLocaleDateString()}`;
  };

  const getReportContent = () => {
    switch (exportFormat) {
      case 'markdown': return generateMarkdownReport();
      case 'json': return generateJSONReport();
      case 'text': return generateTextReport();
      default: return generateMarkdownReport();
    }
  };

  const getFileName = () => {
    const timestamp = new Date().toISOString().split('T')[0];
    const extension = exportFormat === 'json' ? 'json' : exportFormat === 'markdown' ? 'md' : 'txt';
    return `tech-stack-recommendation-${timestamp}.${extension}`;
  };

  const downloadReport = () => {
    const content = getReportContent();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = getFileName();
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(getReportContent());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const shareViaEmail = () => {
    const subject = encodeURIComponent('Tech Stack Recommendation Report');
    const body = encodeURIComponent(getReportContent());
    window.open(`mailto:?subject=${subject}&body=${body}`);
  };

  const shareUrl = () => {
    if (navigator.share) {
      navigator.share({
        title: 'Tech Stack Recommendation',
        text: 'Check out my personalized tech stack recommendation!',
        url: window.location.href
      });
    } else {
      copyToClipboard();
    }
  };

  return (
    <Card className="p-6 terminal-window border-2 border-green-500 bg-black/90">
      <div className="space-y-6">
        <div className="text-center">
          <h3 className="text-xl font-bold text-green-400 mb-2 font-orbitron">{'>'} EXPORT_RECOMMENDATIONS</h3>
          <p className="text-green-300 font-mono text-sm">[SYSTEM] Save, share, or download your personalized tech stack recommendations</p>
        </div>

        {/* Format Selection */}
        <div className="space-y-3">
          <h4 className="font-medium text-green-400 font-orbitron">[FORMAT] EXPORT_TYPE</h4>
          <div className="flex flex-wrap gap-3">
            <button
              onClick={() => setExportFormat('markdown')}
              className={`px-4 py-2 rounded-lg border text-sm font-medium transition-colors font-mono ${
                exportFormat === 'markdown'
                  ? 'bg-green-500/20 border-green-400 text-green-300'
                  : 'bg-black/50 border-green-500/30 text-green-400 hover:bg-green-500/10'
              }`}
            >
              <FileText className="w-4 h-4 inline mr-2" />
              [MD] Markdown
            </button>
            <button
              onClick={() => setExportFormat('json')}
              className={`px-4 py-2 rounded-lg border text-sm font-medium transition-colors font-mono ${
                exportFormat === 'json'
                  ? 'bg-green-500/20 border-green-400 text-green-300'
                  : 'bg-black/50 border-green-500/30 text-green-400 hover:bg-green-500/10'
              }`}
            >
              <Code className="w-4 h-4 inline mr-2" />
              [JSON] Data
            </button>
            <button
              onClick={() => setExportFormat('text')}
              className={`px-4 py-2 rounded-lg border text-sm font-medium transition-colors font-mono ${
                exportFormat === 'text'
                  ? 'bg-green-500/20 border-green-400 text-green-300'
                  : 'bg-black/50 border-green-500/30 text-green-400 hover:bg-green-500/10'
              }`}
            >
              <FileText className="w-4 h-4 inline mr-2" />
              [TXT] Plain
            </button>
          </div>
        </div>

        {/* Export Actions */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
          <button
            onClick={downloadReport}
            className="flex items-center justify-center px-4 py-3 bg-cyan-500/20 border border-cyan-400 text-cyan-300 rounded-lg hover:bg-cyan-500/30 transition-colors font-mono"
          >
            <Download className="w-4 h-4 mr-2" />
            [DL] Download
          </button>
          
          <button
            onClick={copyToClipboard}
            className="flex items-center justify-center px-4 py-3 bg-green-500/20 border border-green-400 text-green-300 rounded-lg hover:bg-green-500/30 transition-colors font-mono"
          >
            {copied ? (
              <>
                <CheckCircle className="w-4 h-4 mr-2" />
                [OK] Copied!
              </>
            ) : (
              <>
                <Copy className="w-4 h-4 mr-2" />
                [CP] Copy
              </>
            )}
          </button>
          
          <button
            onClick={shareViaEmail}
            className="flex items-center justify-center px-4 py-3 bg-purple-500/20 border border-purple-400 text-purple-300 rounded-lg hover:bg-purple-500/30 transition-colors font-mono"
          >
            <Mail className="w-4 h-4 mr-2" />
            [MAIL] Email
          </button>
          
          <button
            onClick={shareUrl}
            className="flex items-center justify-center px-4 py-3 bg-orange-500/20 border border-orange-400 text-orange-300 rounded-lg hover:bg-orange-500/30 transition-colors font-mono"
          >
            <Share2 className="w-4 h-4 mr-2" />
            [SHARE] Link
          </button>
        </div>

        {/* Preview */}
        <div className="space-y-3">
          <h4 className="font-medium text-green-400 font-orbitron">[PREVIEW] OUTPUT_SAMPLE</h4>
          <div className="bg-black/50 border border-green-500/30 rounded-lg p-4 max-h-64 overflow-y-auto">
            <pre className="text-xs text-green-300 whitespace-pre-wrap font-mono">
              {getReportContent().substring(0, 500)}...
            </pre>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 pt-4 border-t border-green-500/30">
          <div className="text-center">
            <div className="text-2xl font-bold text-cyan-400 font-orbitron">{recommendations.confidence}%</div>
            <div className="text-sm text-green-400 font-mono">[CONF] Confidence</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-400 font-orbitron">{recommendations.alternatives.length + 1}</div>
            <div className="text-sm text-green-400 font-mono">[OPT] Options</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-400 font-orbitron">{recommendations.liveInsights.trends.length}</div>
            <div className="text-sm text-green-400 font-mono">[INTEL] Insights</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-orange-400 font-orbitron">{recommendations.primaryStack.additionalTools.length}</div>
            <div className="text-sm text-green-400 font-mono">[TOOLS] Modules</div>
          </div>
        </div>
      </div>
    </Card>
  );
}